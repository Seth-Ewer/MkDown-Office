@using MkDownOffice.Models
@using System.ComponentModel
@inject MarkdownViewModel _viewModel

@if (_viewModel.RootFolder != null)
{
  <FluentTreeView Items="@Items"
                  @bind-SelectedItem="@SelectedItem"
                  OnSelectedChange="@HandleSelectedChanged"
                  LazyLoadItems="true">
  </FluentTreeView>
}

@code {
  private IEnumerable<ITreeViewItem> Items = new List<ITreeViewItem>();
  private ITreeViewItem SelectedItem;

  private void OpenRootFolderSelect(string cabinetName)
  {
    _viewModel.SetRootFolder(cabinetName);
  }
  protected override async Task OnInitializedAsync()
  {
    this.Items = _viewModel.GetDirectoryTree();

    this._viewModel.PropertyChanged += HandlePropertyChanged;
    await base.OnInitializedAsync();
  }

  private void HandlePropertyChanged(object sender, PropertyChangedEventArgs e)
  {
    if (e.PropertyName == nameof(this._viewModel.RootFolder)
     || e.PropertyName == nameof(this._viewModel.CurrentFolder))
    {
      this.RefreshTree();
      this.StateHasChanged();
    }
  }

  private void RefreshTree()
  {
    this.Items = _viewModel.GetDirectoryTree();
  }

  private void HandleSelectedChanged(FluentTreeItem item)
  {
    var path = item.IconCollapsed.Name.Equals("Folder", StringComparison.OrdinalIgnoreCase)
    ? item.Id
    : item.Id.Substring(0, item.Id.LastIndexOf(System.IO.Path.DirectorySeparatorChar));
    if (this._viewModel.CurrentFolder.Path != path)
    {
      this._viewModel.SetCurrentFolder(path);
    }
    if (!string.IsNullOrEmpty(item.Text))
    {
      this._viewModel.SetCurrentFile(item.Text).ConfigureAwait(false);
    }
  }

  ~NavMenu()
  {
    this._viewModel.PropertyChanged -= HandlePropertyChanged;
  }
}
