@using MkDownOffice.Models
@inject ViewModel _viewModel


<!--

<FluentNavMenu style="flex-grow: 1; height:calc(100vh - 50);">
    @foreach(string name in links)
    {
        <FluentNavLink @onclick="@(() => NavigationButtonHandler(name))">
            <FluentIcon Value="@TestIcon(name)" Width="48px" Color="@(IconColorHandler(name))"/>
        </FluentNavLink>
    }
</FluentNavMenu>

-->


<FluentAppBar Style="height:100%; background-color: var(--neutral-layer-2);">

  <FluentAppBarItem Href="/AppBarDefault"
                    Match="NavLinkMatch.All"
                    IconRest="DocumentFolderIcon()"
                    IconActive="DocumentFolderIcon(active: true)"
                    Text="Documents" />
  <FluentAppBarItem Href="/AppBar"
                    IconRest="SearchIcon()"
                    IconActive="SearchIcon(active: true)"
                    Text="Search" />

  <FluentAppBarItem Href="/StructuredLogs"
                    IconRest="ImageIcon()"
                    IconActive="ImageIcon(active: true)"
                    Text="Media"/>
  <FluentAppBarItem Href="/Traces"
                    IconRest="GitIcon()"
                    IconActive="GitIcon(active: true)"
                    Text="Git History" />
</FluentAppBar>

@code {

    // private static string[] links = {
    //         "Files",
    //         "Search",
    //         "Media",
    //         "Git"
    //     };

    public Color IconColorHandler(string target) {
        if(_viewModel.CurrentMenu == target)
            return Color.Neutral;
        else
            return Color.Accent;
    }

    public void NavigationButtonHandler(string target) {
        if(_viewModel.CurrentMenu == target)
            _viewModel.CurrentMenu = null;
        else
            _viewModel.CurrentMenu = target;
    }
    public void SettingButtonHandler(string target){}

    private static Icon TestIcon(string target) {
        switch(target){
            case "Files":
               return new Icons.Regular.Size24.DocumentFolder();
            case "Search":
                return new Icons.Regular.Size24.Search();
            case "Media":
                return new Icons.Regular.Size24.Image();
            default:
                return new Icons.Regular.Size24.CheckboxUnchecked();
        }
    }

  private static Icon DocumentFolderIcon(bool active = false) =>
  active ? new Icons.Filled.Size24.DocumentFolder()
         : new Icons.Regular.Size24.DocumentFolder();

  private static Icon SearchIcon(bool active = false) =>
      active ? new Icons.Filled.Size24.Search()
             : new Icons.Regular.Size24.Search();

  private static Icon ImageIcon(bool active = false) =>
      active ? new Icons.Filled.Size24.Image()
             : new Icons.Regular.Size24.Image();

  private static Icon GitIcon(bool active = false) =>
      active ? new Icons.Filled.Size24.History()
             : new Icons.Regular.Size24.History();
}