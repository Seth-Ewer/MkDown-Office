@page "/md/{*pageRoute}"
@using MkDownOffice.Models
@using MkDownOffice.Shared
@using System.ComponentModel
@inject NavigationManager Navigation
@inject ViewModel _viewModel

  <!-- Inside Component -->
  <div class="content Column-Container">
    <div class="row Column-Container Fill-Height">
      <div class="col-md-12 Column-Container Fill-Height">
        <MarkdownEditor @ref="mdEdit" 
                        MinHeight="300px"
                        MaxHeight="@defaultHeight"                         
                        @bind-Value="@currentMarkdown" 
                        Theme="github" />
      </div>
    </div>
  </div>

@code {
  [Parameter] public string pageRoute { get; set; }
  string defaultHeight = $"800px";
  MarkdownEditor mdEdit;
  string currentMarkdown 
  { 
    get => this._viewModel.CurrentFile?.Markdown ?? ""; 
    set
    {
      if(!this._viewModel.IsFolderOpen) return;
      this._viewModel.CurrentFile.Markdown = value; 
    }
  }
  protected override async Task OnInitializedAsync()
  {

    this.defaultHeight = $"{this._viewModel.WindowHeight}px";
    this._viewModel.PropertyChanged += HandlePropertyChanged;

    await base.OnInitializedAsync();  
  }

  protected override async Task OnParametersSetAsync()
  {
    if(!string.IsNullOrEmpty(pageRoute) && this.mdEdit!=null)
    {
      await this.mdEdit.SetValueAsync(this.currentMarkdown);
    }
    await base.OnParametersSetAsync();
  }

  private void HandlePropertyChanged(object sender, PropertyChangedEventArgs e)
  {
    if(e.PropertyName == nameof(this._viewModel.CurrentFile))
    {
      Navigation.NavigateTo($"/md/{this._viewModel.CurrentFile?.Path}");
    }
  }

  ~MdEditor()
  {
    this._viewModel.PropertyChanged -= HandlePropertyChanged;
    if (this._viewModel.CurrentFile.HasChanges) {
      var promise = this._viewModel.SaveAsync();
      promise.Wait();
    }
  }
}